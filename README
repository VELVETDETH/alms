This is the prototype implementation of the language in "Stateful
Contracts for Affine Types" by Jesse Tov and Riccardo Pucella.

Please see http://www.ccs.neu.edu/home/tov/pubs/affine-contracts/ for
more information about the paper and other software artifacts.

CONTENTS

 * GETTING STARTED
 * USAGE
 * THE LANGUAGE

GETTING STARTED

  We require GHC to build.  It is known to work with GHC 6.10.4,
  and likely will not work with GHC 6.8.

  Provided that a recent ghc is in your path, to build on UNIX it ought
  to be be sufficient to type:

    % make

  This should produce an executable "affine" in the current directory,
  but if Cabal gets confused, it may help to change into the src/
  directory and run make in there.

  It may also be necessary to install the editline library first, with
  "cabal install editline."

  On Windows, build with Cabal:

    > runghc Setup.hs configure
    > runghc Setup.hs build

  This produces an executable in "dist\build\affine\affine".

USAGE

  Examples from the paper, and several more, are in the examples/
  directory.  To try the echo server example on port 10000,
  run:

    % ./affine examples/echoServer.aff 10000

  To connect to the echo server, you can run

    % ./affine examples/netcat.aff localhost 10000

  from another terminal.

  The examples directory contains many more examples, many of which
  are small, but demonstrate type or or contract errors -- the comment at
  the top of each example says what to expect.  Run all the examples
  with:

    % make examples

  We can also run the interpreter in interactive mode:

    % ./affine

  The program also accepts several flags:

    -t   Don't type check
    -x   Don't execute
    -c   Don't add contracts
    -v   Verbose (show translation, results, types)

THE LANGUAGE

  We follow the paper rather closely, and the examples should give a
  reasonable idea as to the concrete syntax.

  In the A language, we use -o for affine function types and -> for
  unlimited function types, rather than \multimap^u and and \multimap^a.

