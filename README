This is the prototype implementation of the language in "Stateful
Contracts for Affine Types" by Jesse Tov and Riccardo Pucella.

Please see http://www.ccs.neu.edu/home/tov/pubs/affine-contracts/ for
more information about the paper and other software artifacts.

CONTENTS

 * WHERE TO FIND STUFF FROM THE PAPER
 * GETTING STARTED
 * USAGE
 * THE LANGUAGE
 * EDITLINE TROUBLE

WHERE TO FIND STUFF FROM THE PAPER

  The affine sockets library is in examples/libsocket-A.aff, and the
  echo server source code that uses it is in examples/echoServer.aff.

GETTING STARTED

  We require GHC to build.  It is known to work with GHC 6.10.4,
  and likely will not work with GHC 6.8.

  Provided that a recent ghc is in your path, to build on UNIX it ought
  to be be sufficient to type:

    % make

  This should produce an executable "affine" in the current directory,

  If it fails, it may also be necessary to either install the editline
  package first or disable line editing (Please see EDITLINE TROUBLE).

  On Windows, build with Cabal:

    > runghc Setup.hs configure
    > runghc Setup.hs build

  This produces an executable in "dist\build\affine\affine".

USAGE

  Examples from the paper, and several more, are in the examples/
  directory.  To try the echo server example on port 10000,
  run:

    % ./affine examples/echoServer.aff 10000

  To connect to the echo server, you can run

    % ./affine examples/netcat.aff localhost 10000

  from another terminal.

  The examples directory contains many more examples, many of which
  are small, but demonstrate type or or contract errors -- the comment at
  the top of each example says what to expect.  Run many of the examples
  with:

    % make examples

  Or run the examples as regression tests (quietly):

    % make tests

  We can also run the interpreter in interactive mode:

    % ./affine

  The program also accepts several flags:

    -t   Don't type check
    -x   Don't execute
    -c   Don't add contracts
    -v   Verbose (show translation, results, types)

THE LANGUAGE

  We follow the paper rather closely, and the examples should give a
  reasonable idea as to the concrete syntax.

  The sockets examples use exceptions for error handling, rather than
  just ignoring it like in the paper.

  In the A language, we use -o for affine function types and -> for
  unlimited function types, rather than \multimap^u and and \multimap^a.

EDITLINE TROUBLE

  Line editing is enabled in the REPL by default, which depends on the
  editline Cabal package.  If make fails and says something about
  editline, then there are three options:

   - Disable line editing:

       % make clean; make FLAGS=-editline

   - Use readline instead:

       % make clean; make FLAGS=readline

   - Try to install editline or readline . . .

  Installing editline can be kind of touchy.  On my system,

    % cabal install editline

  seemed to install it, but Cabal still couldn't find it when
  building this program.  Installing editline globally made it work:

    % sudo cabal install --global editline

  (Likewise, readline didn't work until I installed it globally.)

  At this point, older versions of Cabal may give the installed library
  bad permissions, so something like this may help, depending on where
  it installs things:

    % sudo chmod -R a+rX /usr/local/lib/editline*

  If the cabal installation of the GHC package fails, it may be
  necessary first to install the C library that it depends on.  The
  source is available at http://www.thrysoee.dk/editline/.  On my debian
  system, I was able to install it with:

    % sudo aptitude install libedit2 libedit-dev

  Note that libeditline is a *completely different* library, and
  installing that will not help.

