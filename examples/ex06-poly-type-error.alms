let ap : all 'c 'd. ('c -> 'd) -> 'c -> 'd =
    fun (f: 'a -> 'b) ->
      fun (x: 'a) ->
        f x

let inc : int -> int =
  fun (y: int) ->
    let g = (fun (z:int) -> z + 1 : int -> int :> int -o int) in
      ap g y    (* g: (int -o int) is used as an (int -> int) *)

in print (inc 5)
