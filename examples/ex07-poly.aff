(* Polymorphic version: An Interface Module Intervenes *)

let[C] ap : all 'a 'b. ('a -> 'b) -> 'a -> 'b =
  fun 'a 'b ->
    fun f: ('a -> 'b) ->
      fun x: 'a ->
        f x

let interface iap :> all 'a 'b. ('a -o 'b) -> 'a -o 'b = ap

let[A] inc : int -> int =
  fun y: int ->
    (fun g: (int -o int) ->
       iap[int,int] g y)
    (fun z: int -> z + 1)

in print[int] (inc 5)
