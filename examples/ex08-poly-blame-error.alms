(* A Lying Interface *)

let ap : all 'a. ('a -> 'a) -> 'a -> 'a =
  fun 'a ->
    fun f: ('a -> 'a) ->
      fun x: 'a ->
        f (f x)    (* f is used twice here, despite what iap2 claims *)

let iap2 = (ap :> all 'a. ('a -o 'a) -> 'a -o 'a)

let inc : int -> int =
  fun y: int ->
    (fun g: (int -o int) ->
       iap2[int] g y)
    (fun z: int -> z + 1)

in print[int] (inc 5)
