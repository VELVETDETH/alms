(* Polymorphic version: A Lying Interface Module (blame iap2) *)

let[C] ap : all 'a. ('a -> 'a) -> 'a -> 'a =
  fun 'a ->
    fun f: ('a -> 'a) ->
      fun x: 'a ->
        f (f x)    (* f is used twice here, despite what iap2 claims *)

let interface iap2 :> all 'a. ('a -o 'a) -> 'a -o 'a = ap

let[A] inc : int -> int =
  fun y: int ->
    (fun g: (int -o int) ->
       iap2[int] g y)
    (fun z: int -> z + 1)

in print[int] (inc 5)
