(* Unlimited opaque objects (ex11 corrected) *)

(* If we use an arrow rather than lollipop type for makePair,
   then even though the pair is opaque to language C, it's not
   protected by a contract because it's unlimited. *)

let[A] makePair : (int -> int) -> int -> (int -> int) * int =
  fun f: (int -> int) ->
    fun x: int ->
      (f, x)

let[A] doPair : (int -> int) * int -> int =
  fun pair: (int -> int) * int ->
    let (f, x) = pair in
    let result = f x in
      putStr "f(";
      putStr (string_of[int] x);
      putStr ") = ";
      putStrLn (string_of[int] result);
      result

let[C] double : int -> {(int -> int) * int} =
  fun z: int ->
    makePair (( * ) 2) z

in let pair = double 4 in
     doPair pair;
     print[int] (doPair pair)
