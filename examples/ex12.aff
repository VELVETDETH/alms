(* Unlimited opaque objects (ex11 corrected) *)

(* If we use an arrow rather than lollipop type for makePair,
   then even though the pair is opaque to language C, it's not
   protected by a contract because it's unlimited. *)

module[A] makePair : (int -> int) -> int -> (int -> int) * int =
  \f: int -> int.
    \x: int.
      (f, x)

module[A] doPair : (int -> int) * int -> int =
  \pair: (int -> int) * int.
    let (f, x) = pair in
    let result = f x in
      putStr "f(";
      putStr (showInt x);
      putStr ") = ";
      putStrLn (showInt result);
      result

module[C] double : int -> {(int -> int) * int} =
  \z: int.
    makePair (mul 2) z

in let pair = double 4 in
     doPair pair;
     printInt (doPair pair)
