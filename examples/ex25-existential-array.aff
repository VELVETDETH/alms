(* Demonstrates the standard, duality encoding of existentials.

   We can pack an array and its capability into a pair that no longer
   contains the tag in the type, which means that we could, for example,
   have a list of packed arrays.

   There's actually no need for the packed pair to be abstract, in which
   case pack would just build the function that we apply to a
   continuation to unack.
*)

#load "libarray-A.aff"

abstype[A] 'a exists qualifier A =
  Ex of all '<r. (all 't. ('a, 't) array -> 't writecap -> '<r) -o '<r
with
  let[A] pack['a, 't] (a: ('a, 't) array) (c: 't writecap) =
    Ex (fun '<r (k : all 't. ('a, 't) array -> 't writecap -> '<r) ->
          k['t] a c)

  let[A] unpack['a, '<r] (Ex ex: 'a exists)
                         (k: all 't. ('a, 't) array -> 't writecap -> '<r) =
    ex k
end


