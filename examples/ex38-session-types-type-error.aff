(* An example with session types, including choice. (Type error) *)

#load "libthread-A.aff"
#load "libsessiontype.aff"

open SessionType

type[A] 'a protocol = ('a send; 'a send; 'a recv; unit
                       +
                       'a send; 'a recv; unit) select

let[A] server =
  fun c : int protocol dual channel ->
    match follow c with
    | Left c ->
        let (x, c) = recv c in
        let (y, c) = recv c in
          send c (x + y);
          ()
    | Right c ->
        let (x, c) = recv c in
          send c (0 - x);
          ()

let[A] client =
  fun c : int protocol channel ->
    fun (x : int) (y : int) ->
      let c = sel1 c in
      let c = send c x in
      let (r, c) = recv c in
      let _ = send c y in
        r

let[A] main =
  fun (x : int) (y : int) ->
    let rv = newRendezvous[int protocol] () in
      AThread.fork (fun _:unit -> server (accept rv));
      client (request rv) x y

in print (main 3 4)
