(*
  An array library.
*)

module Array = struct[C]
  abstype 'a array = Array of int * (int -> 'a) ref with
    let newArray['a] (size : int): 'a array =
      Array (size, ref (fun ix: int ->
                          failwith['a] "array element uninitialized"))

    let checkIndex (size: int) (ix: int): unit =
      if ix < 0
        then failwith[unit] "array index too low"
      else if ix >= size
        then failwith[unit] "array index too high"
      else ()

    let at['a] (Array (size, r): 'a array) (ix: int): 'a =
      checkIndex size ix;
      !r ix

    let update['a] (Array (size, r): 'a array) (ix: int) (new: 'a): unit =
      checkIndex size ix;
      let oldf = !r in
        (r <- fun ix': int -> if ix == ix' then new else oldf ix');
        ()

    let size['a] (Array (size, _): 'a array) = size
  end
end
