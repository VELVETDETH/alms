(*
    A typestate sockets library
*)

#load "libsocket-C.aff"

module ASocket = struct[A]
  module S = Socket
  let getAddrByName = S.getAddrByName

  abstype 't socket  = Sock of {S.socket}
      and 't initial   qualifier A = Initial
      and 't bound     qualifier A = Bound
      and 't listening qualifier A = Listening
      and 't connected qualifier A = Connected
  with

    (* When we raise an exception, we "pickle" the capability. *)
    abstype frozenInitial   qualifier A = FInitial {S.socket}
        and frozenBound     qualifier A = FBound {S.socket}
        and frozenListening qualifier A = FListening {S.socket}
        and frozenConnected qualifier A = FConnected {S.socket}


    let socket (): ex 't. 't socket * 't initial =
      let sock = S.socket () in
      Pack(unit, Sock[unit] sock, Initial[unit])

    (* If bind fails, you actually can try again. *)
    let bind['t] (Sock sock: 't socket) (port: int) (_: 't initial)
                 : 't bound =
      S.bind sock port;
      Bound['t]

    (* If connect fails, you actually can try again. *)
    let connect['t] (Sock sock: 't socket) (host: string) (port: string)
                    (_: ('t initial, 't bound) either)
                    : 't connected =
      S.connect sock host port;
      Connected['t]

    let listen['t] (Sock sock: 't socket) (_: 't bound)
                   : 't listening =
      S.listen sock;
      Listening['t]

    let accept['t] (Sock sock: 't socket) (_: 't listening)
                   : (ex 's. 's socket * 's connected) * 't listening =
      let newsock = S.accept sock in
        (Pack(unit, Sock[unit] newsock, Connected[unit]),
         Listening['t])

    let send['t] (Sock sock: 't socket) (data: string)
                 (_: 't connected) : 't connected option =
      if S.send sock data
        then Some (Connected['t])
        else S.close sock; None['t connected]

    let recv['t] (Sock sock: 't socket) (len: int)
                 (_: 't connected) : (string * 't connected) option =
      match S.recv sock len with
      | Some str -> Some (str, Connected['t])
      | None     -> S.close sock; None[string * 't connected]

    let close['t] (Sock sock: 't socket) (_: 't connected): unit =
      S.close sock
  end
end

