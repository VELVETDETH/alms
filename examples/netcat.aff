(* Poor programmer's telnet *)

open Prim.Socket

local
  open IO
with
  let rec[C] sendThread (sock: socket): unit =
    if hIsEOF stdin
      then
        shutdown sock ShutdownSend
      else
        match send sock (getLine () ^ "\r\n") with
        | true  -> sendThread sock
        | false -> ()

  let rec[C] recvThread (sock: socket): unit =
    match recv sock 1024 with
    | Some s -> putStr s; recvThread sock
    | None   -> ()
end

let[C] setupConnection (addr: sockAddr): socket =
  let s = socket AF_INET Stream defaultProtocol in
    connect s addr;
    s

let[C] teardownConnection (sock: socket): unit =
  close sock

let[C] getAddr (): sockAddr =
  match getArgs () with
  | Cons(host, Cons(port, Nil))
      -> let info = AddrInfo(Nil[addrInfoFlag], AF_INET,
                             Stream, defaultProtocol,
                             SockAddrInet(PortNum 0, 0), None[string]) in
         (match getAddrInfo (Some info) (Some host) (Some port) with
          | Cons (AddrInfo (_, _, _, _, sockAddr, _), _) -> sockAddr
          | _ -> failwith[sockAddr]
                   ("Could not resolve address "^host^":"^port))
  | _ -> failwith[sockAddr] ("Usage: " ^ getProgName () ^ " HOST SERVICE")

let[A] main () =
  let sock = setupConnection (getAddr ()) in
  let wait = newFuture (fun () -> recvThread sock) in
    sendThread sock;
    getFuture wait;
    teardownConnection sock

in main ()
