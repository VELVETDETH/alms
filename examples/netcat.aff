(* Poor programmer's telnet *)

open Socket

let rec[C] pushString (sock: socket) (c: char): unit =
  if send sock (implode (Cons (c, Nil[char]))) == 0
    then pushString sock c
    else ()

local
  open IO
with
  let rec[C] sendThread (sock: socket): unit =
    if hIsEOF stdin
      then ()
      else
        pushString sock (hGetChar stdin);
        sendThread sock

  let rec[C] recvThread (sock: socket): unit =
    hPutStr stdout (recv sock 1);
    recvThread sock
end

let[C] setupConnection (addr: sockAddr): socket =
  let s = socket AF_INET Stream defaultProtocol in
    connect s addr; s

let[C] getAddr (): sockAddr =
  match getArgs () with
  | Cons(host, Cons(port, Nil))
      -> let info = AddrInfo(Nil[addrInfoFlag], AF_INET,
                             Stream, defaultProtocol,
                             SockAddrInet(0, 0), None[string]) in
         (match getAddrInfo (Some info) (Some host) (Some port) with
          | Cons (AddrInfo (_, _, _, _, sockAddr, _), _) -> sockAddr
          | _ -> failwith[sockAddr]
                   ("Could not resolve address "^host^":"^port))
  | _ -> failwith[sockAddr] ("Usage: " ^ getProgName () ^ " HOST SERVICE")

let[A] main () =
  let sock = setupConnection (getAddr ()) in
    threadFork (fun () -> recvThread sock);
    sendThread sock

in main ()
