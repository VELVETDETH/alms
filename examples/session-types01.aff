(* An example with session types *)

type[A] protocol = int send -> int send -> int recv -> unit

module[A] server =
  \c : protocol dual channel.
    let (x, c) = recv c in
    let (y, c) = recv c in
      send c (x + y);
      ()

module[A] client =
  \c : protocol channel.
    \(x : int) (y : int).
      let c = send c x in
      let c = send c y in
      let (r, _) = recv c in
        r

module[A] main =
  \(x : int) (y : int).
    let rv = newRendezvous[protocol] () in
      threadFork (\_:unit. server (accept rv));
      client (request rv) x y

in print (main 3 4)
