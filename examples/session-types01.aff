(* An example with session types *)

module[A] server : (int recv -> int recv -> int send -> unit) channel ->
                   unit =
  \c : (int recv -> int recv -> int send -> unit) channel.
    let (x, c) = recv c in
    let (y, c) = recv c in
      send c (add x y);
      ()

module[A] client : (int send -> int send -> int recv -> unit) channel ->
                   int -o int -o int =
  \c : (int send -> int send -> int recv -> unit) channel.
    \(x : int) (y : int).
      let c = send c x in
      let c = send c y in
      let (r, _) = recv c in
        r

module[A] main : int -> int -> int =
  \(x : int) (y : int).
    let rv = newRendezvous[int send -> int send -> int recv -> unit] () in
      threadFork (\_:unit. server (accept rv));
      client (request rv) x y

in print (main 3 4)
