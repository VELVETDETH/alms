(* An example with session types, including choice. *)

type[A] 'a protocol = (('a send -> 'a send -> 'a recv -> unit)
                       *
                       ('a send -> 'a recv -> unit)) select

module[A] server =
  \c : int protocol dual channel.
    match follow c with
    | Left c ->
        let (x, c) = recv c in
        let (y, c) = recv c in
          send c (add x y);
          ()
    | Right c ->
        let (x, c) = recv c in
          send c (sub 0 x);
          ()

module[A] client =
  \c : int protocol channel.
    \(x : int) (y : int).
      let c = sel1 c in
      let c = send c x in
      let c = send c y in
      let (r, _) = recv c in
        r

module[A] main =
  \(x : int) (y : int).
    let rv = newRendezvous[int protocol] () in
      threadFork (\_:unit. server (accept rv));
      client (request rv) x y

in print (main 3 4)
