(* An example with session types, including choice. *)

module[A] server : ((int recv -> int recv -> int send -> unit)
                    *
                    (int recv -> int send -> unit)) follow channel ->
                   unit =
  \c : ((int recv -> int recv -> int send -> unit)
                    *
                    (int recv -> int send -> unit)) follow channel.
    match follow c with
    | Left c ->
        let (x, c) = recv c in
        let (y, c) = recv c in
          send c (add x y);
          ()
    | Right c ->
        let (x, c) = recv c in
          send c (sub 0 x);
          ()

module[A] client : ((int send -> int send -> int recv -> unit)
                    *
                    (int send -> int recv -> unit)) select channel ->
                   int -o int -o int =
  \c : ((int send -> int send -> int recv -> unit)
        *
        (int send -> int recv -> unit)) select channel.
    \(x : int) (y : int).
      let c = sel1 c in
      let c = send c x in
      let c = send c y in
      let (r, _) = recv c in
        r

module[A] main : int -> int -> int =
  \(x : int) (y : int).
    let rv = newRendezvous[((int send -> int send -> int recv -> unit)
                            *
                            (int send -> int recv -> unit)) select] () in
      threadFork (\_:unit. server (accept rv));
      client (request rv) x y

in print (main 3 4)
