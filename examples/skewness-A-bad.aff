(* Demonstrates (affine) abstract types.  Correct. *)

(*
    This is like ex25-array.aff, but it has an error in its capability
    threading, which manifests as a type error.
*)

abstype[C] 'a array = Array of int * (int -> 'a) ref with
  let[C] newArray['a] (size : int): 'a array =
    Array (size, ref (fun ix: int ->
                        failwith['a] "array element unitialized"))

  let[C] checkIndex (size: int) (ix: int): unit =
    if ix < 0
      then failwith[unit] "array index too low"
    else if ix >= size
      then failwith[unit] "array index too high"
    else ()

  let[C] at['a] (Array (size, r): 'a array) (ix: int): 'a =
    checkIndex size ix;
    !r ix

  let[C] update['a] (Array (size, r): 'a array) (ix: int) (new: 'a): unit =
    checkIndex size ix;
    let oldf = !r in
      (r <- fun ix': int -> if ix == ix' then new else oldf ix');
      ()

  let[C] size['a] (Array (size, _): 'a array) = size
end

abstype[A] ('a, 't) array = Array of {{'a} array} with
  abstype[A] ('t, 'c) readcap qualifier A = MkCap with
    type[A] 't writecap = ('t, unit) readcap

    let[A] withNewA['a, '<r]
              (size: int)
              (kont: all 't. ('a, 't) array -o 't writecap -o '<r)
              : '<r =
      kont (Array['a,unit] (newArray['a] size)) MkCap[unit,unit]

    let[A] splitA['t,'c] (_: ('t, 'c) readcap)
               : ('t, 'c * unit) readcap * ('t, 'c * unit) readcap =
      (MkCap['t, 'c * unit], MkCap['t, 'c * unit])

    let[A] joinA['t,'c]
               (_: ('t, 'c * unit) readcap * ('t, 'c * unit) readcap)
               : ('t, 'c) readcap =
      MkCap['t, 'c]
  end

  let[A] atA['a,'t,'c] (Array arr: ('a, 't) array) (ix: int)
                       (cap : ('t, 'c) readcap)
                       : 'a * ('t, 'c) readcap =
    (at arr ix, cap)

  let[A] updateA['a,'t] (Array arr: ('a, 't) array) (ix: int) (new: 'a)
                        (cap : 't writecap) : 't writecap =
    update arr ix new;
    cap

  let[A] sizeA['a,'t] (Array arr: ('a, 't) array): int =
    size arr
end

let[A] par ['t,'c,'<r1,'<r2]
           (left:  all 'd. ('t, 'd) readcap -> '<r1 * ('t, 'd) readcap)
           (right: all 'd. ('t, 'd) readcap -> '<r2 * ('t, 'd) readcap)
           (c: ('t, 'c) readcap)
           : '<r1 * '<r2 * ('t, 'c) readcap =
  let (c1, c2) = splitA c in
  let future   = newFuture (fun () -> left c1) in
  let (r2, c2) = right c2 in
  let (r1, c1) = getFuture future in
    (r1, r2, joinA (c1, c2))

let[A] foldA ['a,'t,'c,'<r]
             (f: 'a -> '<r -> '<r) (z: '<r)
             (a: ('a, 't) array) (c: ('t, 'c) readcap) =
  let rec loop (i: int) (z: '<r)| (c: ('t, 'c) readcap)
               : '<r * ('t, 'c) readcap =
    if i < sizeA a
      then let (elt, c) = atA a i c in
             loop (i + 1) (f elt z) c
      else (z, c)
   in loop 0 z c

let[A] mapA ['a,'t,'c,'b,'<r]
            (f: 'a -> 'b)
            (a: ('a, 't) array) (c: ('t, 'c) readcap) |
            (k: all 's. ('b, 's) array -o 's writecap -o
                        ('t, 'c) readcap -o '<r)
            : '<r =
  withNewA (sizeA a)
    (fun['s] (b: ('b, 's) array) (d: 's writecap) ->
      let ((_, d), c) =
            foldA (fun (x: 'a) ((i, d): int * 's writecap) ->
                     (i + 1, updateA b i (f x) d))
                  (0, d) a c
       in k b d c)

let[A] putA['a,'t,'c] (a: ('a, 't) array) (c: ('t, 'c) readcap) =
  putStr "[";
  let (_, c) =
    foldA (fun (x: 'a) (comma: bool) ->
             (if comma then putStr "," else ());
             putStr (string_of x);
             true)
          false a c in
  putStrLn "]";
  c

let[A] sumA ['t,'c] (a: (float, 't) array) (c: ('t, 'c) readcap) =
  foldA (+.) 0.0 a c

let[A] meanA ['t, 'c] (a: (float, 't) array) (c: ('t, 'c) readcap) =
  let (total, c) = sumA a c in
    (total /. float_of_int (sizeA a), c)

let[A] stdDevA ['t, 'c] (a: (float, 't) array) (c: ('t, 'c) readcap) =
  let (mean, c) = meanA a c in
  let (num, c)  = foldA
                    (fun (x: float) (acc: float) -> (x -. mean) ** 2.0)
                    0.0 a c in
    (sqrt (num /. float_of_int (sizeA a)), c)

let[A] skewness ['t, 'c] (a: (float, 't) array) (c: ('t, 'c) readcap) =
  let n         = float_of_int (sizeA a) in
  let (m, c)    = meanA a c in
  let (s, c)    = stdDevA a c in
  let (devs, c) = foldA
                    (fun (x: float) (acc: float) ->
                       (x -. m) ** 3.0 +.  acc)
                    0.0 a c in
    (devs /. ((n -. 1.0) *. s ** 3.0) /. sqrt (6.0 /. n), c)

type[A] transformation = T of string * (float -> float)

let[A] reduceSkewness ['t]
                       (ts: transformation list)
                       (a: (float, 't) array)
                       (c0: 't writecap) =
  let rec replace (i: int)
                  (T(_, ft) as t: transformation)
                  (c: 't writecap)
                  : 't writecap =
    if i < sizeA a
      then let (x, c) = atA a i c in
           let c      = updateA a i (ft x) c in
             replace (i + 1) t c
      else c in
  let rec find ['c] (ix: int)
                    (ts: transformation list)
                    (c: ('t, 'c) readcap)
                    : float * transformation * ('t, 'c) readcap =
    match ts with
    | Nil -> let (sk, c) = skewness a c in
               (sk, T("identity", fun f: float -> f), c)
    | Cons(T(_, ft) as t, ts)
          -> let ((sk1, t1), (sk2, t2), c) =
               par
                 (fun 'c -> find['c] (ix + 1) ts)
                 (fun 'c (c: ('t, 'c) readcap) ->
                   mapA ft a c
                     (fun 's (b: (float, 's) array) (d: 's writecap)
                             (c: ('t, 'c) readcap) ->
                       let (sk, d) = skewness b d in
                         (sk, t, c)))
                 c
              in if absf sk2 <. absf sk1
                   then (replace 0 t1 c0; (sk2, t2, c))
                   else (sk1, t1, c) in
  find 0 ts c0

let[A] withNewDistribution['<r]
         (n: int) (T(_, gen): transformation)
         (k: all 't. (float, 't) array -> 't writecap -> '<r) : '<r =
  withNewA n (fun 't (a: (float, 't) array) (c: 't writecap) ->
    let rec loop (i: int) (c: 't writecap): 't writecap =
      if i < n
        then loop (i + 1) (updateA a i (gen (float_of_int (i + 1))) c)
        else c in
      k a (loop 0 c))

let[A] (^:) '<a (t: '<a) (ts: '<a list) = Cons(t, ts)

let[A] functions (n: int) =
  T("1",         fun (ix: float) -> 1.0) ^:
  T("x",         fun (ix: float) -> ix) ^:
  T("x^2",       flip ( ** ) 2.0) ^:
  T("sqrt x",    sqrt) ^:
  T("x^5",       flip ( ** ) 5.0) ^:
  T("x^1/5",     flip ( ** ) 0.2) ^:
  T("e^x",       ( ** ) 2.718) ^:
  T("log x",     log) ^:
  T("1/x",       (/.) 1.0) ^:
  T("-x",        (-.) (float_of_int n)) ^:
  Nil

let[A] testCase (n: int) (T(name, _) as t: transformation) =
  withNewDistribution n t
    (fun 't (a: (float, 't) array) (c: 't writecap) ->
      let (sk0, c)       = skewness a c in
      let (sk, T(name', _), c) = reduceSkewness (functions n) a c in
      putStrLn ("Distribution:      " ^ name);
      putStrLn ("Original skewness: " ^ string_of sk0);
      putStrLn ("Improved skewness: " ^ string_of sk);
      putStrLn ("Winning function:  " ^ name');
      putStrLn "")

let[A] tests (n: int) =
  foldlA (fun (t: transformation) () -> testCase n t)
         () (functions n)

in
  tests 30
