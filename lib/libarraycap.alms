(*
  An affine array library.
*)

#load "libarray"

module AArray = struct
  type `a / `b
  type 1
  type 2
  local
    module A = Array
  with
    abstype ('a, 't) array = Array of 'a A.array with
      abstype ('t, 'c) readcap qualifier A = MkCap with
        type 't writecap = ('t, 1) readcap

        let new['a] (size: int) : ex 't. ('a, 't) array * 't writecap =
          Pack[ex 't. ('a, 't) array * 't writecap]
              (unit, (Array['a,unit] (A.newArray['a] size), MkCap[unit,1]))

        let split['t,'c] (_: ('t, 'c) readcap)
                : ('t, 'c/2) readcap * ('t, 'c/2) readcap =
          (MkCap['t, 'c/2], MkCap['t, 'c/2])

        let join['t,'c]
                (_: ('t, 'c/2) readcap * ('t, 'c/2) readcap)
                : ('t, 'c) readcap =
          MkCap['t, 'c]
      end

      let at['a,'t,'c] (Array arr: ('a, 't) array) (ix: int)
                        (cap : ('t, 'c) readcap)
                        : 'a * ('t, 'c) readcap =
        (A.at arr ix, cap)

      let update['a,'t] (Array arr: ('a, 't) array) (ix: int) (new: 'a)
                         (cap : 't writecap) : 't writecap =
        A.update arr ix new;
        cap

      let size['a,'t] (Array arr: ('a, 't) array): int =
        A.size arr
    end
  end

  let par ['t,'c,`r1,`r2]
          (left:  all 'd. ('t, 'd) readcap -> `r1 * ('t, 'd) readcap)
          (right: all 'd. ('t, 'd) readcap -> `r2 * ('t, 'd) readcap)
          (c: ('t, 'c) readcap)
          : `r1 * `r2 * ('t, 'c) readcap =
    let (c1, c2) = split c in
    let future   = Future.new (fun () -> left c1) in
    let (r2, c2) = right c2 in
    let (r1, c1) = Future.get future in
      (r1, r2, join (c1, c2))

  let fold ['a,'t,'c,`r]
           (f: 'a -> `r -> `r) (z: `r)
           (a: ('a, 't) array) (c: ('t, 'c) readcap) =
    let rec loop (i: int) (z: `r)| (c: ('t, 'c) readcap)
                 : `r * ('t, 'c) readcap =
      if i < size a
        then let (elt, c) = at a i c in
               loop (i + 1) (f elt z) c
        else (z, c)
     in loop 0 z c

  let map ['a,'t,'c,'b]
          (f: 'a -> 'b)
          (a: ('a, 't) array) (c: ('t, 'c) readcap)
          : (ex 's. ('b, 's) array * 's writecap) * ('t, 'c) readcap =
    let Pack('s, (b, d)) = new['b] (size a) in
    let ((_, d), c)      = fold (fun (x: 'a) (i: int, d: 's writecap) ->
                                    (i + 1, update b i (f x) d))
                                 (0, d) a c in
      (Pack[ex 't. ('b, 't) array * 't writecap]('s, (b, d)), c)

  let putArray['a,'t,'c] (a: ('a, 't) array) (c: ('t, 'c) readcap) =
    putStr "[";
    let (_, c) =
      fold (fun (x: 'a) (comma: bool) ->
              (if comma then putStr "," else ());
              putStr (string_of x);
              true)
           false a c in
    putStrLn "]";
    c
end
