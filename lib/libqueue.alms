module Queue = struct
  abstype +`a queue qualifier `a = Queue of `a list * `a list
  with
    exception Empty

    let emptyA[`a] () = Queue (Nil[`a], Nil[`a])
    let isEmptyA[`a] (q : `a queue) =
      match q with
      | Queue (Nil, Nil) -> (true, Queue (Nil[`a], Nil[`a]))
      | q                -> (false, q)
    let sizeA[`a] (Queue (front, back) : `a queue) =
      let (lenf, front) = lengthA front in
      let (lenb, back)  = lengthA back in
      (lenf + lenb, Queue (front, back))
    let firstA[`a] (Queue (front, back) : `a queue) =
      match front with
      | Cons (x, xs) -> Some (x, Queue (xs, back))
      | Nil ->
        match rev back with
        | Cons (x, xs) -> Some (x, Queue (xs, Nil[`a]))
        | Nil -> None[`a * `a queue]

    let empty['a] = Queue (Nil['a], Nil['a])
    let isEmpty[`a] (q : `a queue) =
      match q with
      | Queue (Nil, Nil) -> true
      | _                -> false
    let enqueue[`a] (x : `a) (Queue (front, back) : `a queue) =
      Queue (front, Cons (x, back))
    let first[`a] (q : `a queue) =
      match firstA q with
      | Some (x, _) -> x
      | None        -> raise Empty
    let dequeue[`a] (q : `a queue) =
      match firstA q with
      | Some (_, q') -> q'
      | None         -> raise Empty
    let size[`a] (Queue (front, back) : `a queue) =
      length front + length back
  end
end
