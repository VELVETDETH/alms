int
`a
`a
`a
`b
`a
`b
`a *  `a list
`a *  `a list
int -> int -> int
int -> int -> int
int -> int -> int
int -> int -> int
int -> int -> int
int -> int
int -> int
int -> int -> bool
int -> string
string -> int
unit -> int
float -> float -> bool
float -> float -> bool
float -> float -> float
float -> float -> float
float -> float -> float
float -> float -> float
float -> float -> float
float -> float
float -> float
float -> float
float -> float
int -> float
float -> int
float -> string
string -> float
string -> char list
char list -> string
string -> string -> string
all 'a. 'a -> string
string -> int
all 'a. 'a -> 'a -> bool
all 'a. 'a -> unit
char -> unit
unit -> char
unit -> unit
string -> unit
string -> unit
unit -> string
unit -> string list
unit -> string
string -> string
unit -> (string *  string) list
all `a. `a -> `a ref
all `a. `a -> `a aref
all 'a. 'a ref -> 'a
all 'a. 'a aref -> 'a aref *  'a
all `a. `a ref -> `a -> `a
all `a `b. `a aref -> `b -A> `b aref *  `a
all `b `a. `a -> `b
all `a. `a -> `a *  `a
string -> IO.ioMode -> IO.handle
IO.handle -> char
IO.handle -> string
IO.handle -> bool
IO.handle -> char -> unit
IO.handle -> string -> unit
IO.handle -> unit
IO.handle -> unit
IO.handle
IO.handle
IO.handle
all 'a. unit -> 'a Channel.channel
all 'a. 'a Channel.channel -> 'a -> unit
all 'a. 'a Channel.channel -> 'a
(unit -> unit) -> Thread.thread
Thread.thread -> unit
int -> unit
Thread.thread -> Thread.thread
all `a. `a -> `a MVar.mvar
all `a. unit -> `a MVar.mvar
all `a. `a MVar.mvar -> `a
all `a. `a MVar.mvar -> `a -> unit
all 'a. 'a MVar.mvar -> 'a
all `a. `a MVar.mvar -> `a -> `a
all `a. `a MVar.mvar -> `a option
all `a. `a MVar.mvar -> `a -> bool
all `a. `a MVar.mvar -> bool
all `a `b. `a MVar.mvar -> (`a -> `b) -> `b
all `a. `a MVar.mvar -> (`a -> `a) -> unit
all `a `b. `a MVar.mvar -> (`a -> `a *  `b) -> `b
all `a. (unit -A> `a) -> `a Future.future
all `a. `a Future.future -> `a
all `a. (`a Future.future -A> unit) -> `a Future.cofuture
all `a. `a Future.cofuture -> `a -A> unit
all `a. unit -> `a Future.future *  `a Future.cofuture
int
int
int
int
int *  int *  int *  int
int
Prim.Socket.portNumber *  Prim.Socket.hostAddress
Prim.Socket.portNumber *  Prim.Socket.flowInfo *  Prim.Socket.hostAddress6 *  Prim.Socket.scopeID
string
Prim.Socket.addrInfoFlag list *  Prim.Socket.family *  Prim.Socket.socketType *  Prim.Socket.protocolNumber *  Prim.Socket.sockAddr *  string option
string
string
Prim.Socket.hostAddress
Prim.Socket.protocolNumber
Prim.Socket.addrInfo
Prim.Socket.addrInfo option -> Prim.Socket.hostName option -> Prim.Socket.serviceName option -> Prim.Socket.addrInfo list
string -> Prim.Socket.hostAddress
Prim.Socket.family -> Prim.Socket.socketType -> Prim.Socket.protocolNumber -> Prim.Socket.socket
Prim.Socket.socket -> Prim.Socket.sockAddr -> unit
Prim.Socket.socket -> Prim.Socket.sockAddr -> unit
Prim.Socket.socket -> int -> unit
Prim.Socket.socket -> Prim.Socket.socket *  Prim.Socket.sockAddr
Prim.Socket.socket -> string -> int
Prim.Socket.socket -> int -> string
Prim.Socket.socket -> Prim.Socket.shutdownCmd -> unit
Prim.Socket.socket -> unit
Prim.Socket.socket -> bool
Prim.Socket.socket -> bool
all `a. exn -> `a
all `a. (unit -A> `a) -> exn +  string +  `a
all `a. int -> (int -> `a) -> `a Prim.Array.array
all `a. `a Prim.Array.array -> int
all `a. `a Prim.Array.array -> int -> `a -> `a
all 'a. 'a Prim.Array.array -> int -> 'a
Alms, version 0.0.0-dev
